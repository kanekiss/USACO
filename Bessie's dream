// ï»¿#pragma GCC optimize("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,abm,mmx,avx,avx2,popcnt,tune=native")
// #define _CRT_SECURE_NO_WARNINGS
//#include <chrono>
#include <set>
#include <map>
#include <deque>
#include <string>
#include <cstdint>
#include <cmath>
#include <queue>
#include <cassert>
#include <random>
#include <bitset>
#include <iomanip>
#include <numeric>
#include <time.h>//////////////
#include <ctime>
#include <climits>
#include <string>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <chrono>
#include <unordered_set>
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
//#define endl '\n'
#define mp make_pair
#define pbc push_back
#define pob pop_back()
#define empb emplace_back
#define queuel queue<long long>
#define sqr(a) ((a) * (a))
#define lsqr(a) (ld(a) * a)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pin(p) cin >> p.first >> p.second;
#define uniq(a) sort(all(a));(a).resize(unique(all(a)) - a.begin());
#define rev(v) reverse(v.begin(), v.end());
#define sout(s, c) for (auto i : s) cout << i << c;
#define pout(p) cout << p.first << " " << p.second;
#define er(v, l, r) erase(v.begin() + l, v.begin() + r);
#define vin(v) for (ll i = 0; i < v.size(); ++i) cin >> v[i];
#define vout(v, c) for (int i = 0; i < v.size(); ++i) cout << v[i] << c;
#define pushi(v, a) for (int i = 0; i < a.size(); ++i) v.push_back(a[i]);
#define fastio() ios_base::sync_with_stdio(0); cout.tie(0); cin.tie(0); srand(time(NULL))
#define dab(v) for(auto i:v)cout<<i<<' ';
#define sp system("pause")
#define left left228
#define type type1337
#define right right228
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
using namespace std;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
const ld EPS = 1e-12;
const ld EPS2 = 1e-12;
const ld PI = acos(-1);
int mod = (int)998244353;
const int MOD7 = 1000000007;
const int MOD9 = 1000000009;
const int a228 = 18;
const ll INF = 1e18;
const int inf = 1e9;
mt19937 rnd(std::chrono::steady_clock::now().time_since_epoch().count());
const ll kekmod = 1791791791;
const ll bestmod = 1148822869;
int n, m;
vector<vector<int>> a;
vector<int> dx{ 1,-1,0,0 };
vector<int> dy{ 0,0,1,-1 };
const int MAXN = 1e3 + 1;
int d[MAXN][MAXN][2];
int dp[4][MAXN][MAXN];
signed main()
{
	fastio();
	freopen("dream.in", "r", stdin);
	freopen("dream.out", "w", stdout);
	for (int i = 0; i < MAXN; ++i) for (int j = 0; j < MAXN; ++j) for (int k = 0; k < 2; ++k) d[i][j][k] = inf;
	cin >> n >> m;
	a.resize(n, vector<int>(m));
	for (int i = 0; i < n; ++i) for (int j = 0; j < m; ++j) cin >> a[i][j];
	for (int i = n - 1; i >= 0; --i)
	{
		for (int j = m - 1; j >= 0; --j)
		{
			if (a[i][j] == 4)
			{
				dp[0][i][j] = (i == n - 1 ? 0 : dp[0][i + 1][j]) + 1;
				dp[2][i][j] = (i == m - 1 ? 0 : dp[2][i][j + 1]) + 1;
			}
			else
			{
				dp[0][i][j] = dp[2][i][j] = 0;
			}
		}
	}
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < m; ++j)
		{
			if (a[i][j] == 4)
			{
				dp[1][i][j] = (i == 0 ? 0 : dp[1][i - 1][j]) + 1;
				dp[3][i][j] = (j == 0 ? 0 : dp[3][i][j - 1]) + 1;
			}
			else
			{
				dp[1][i][j] = dp[3][i][j] = 0;
			}
		}
	}
	set < pair<int, pair<pair<int, int>, int>>>q;
	d[0][0][0] = 0;
	q.insert({ 0,{{0,0},0} });
	while (q.size())
	{
		auto v = q.begin()->second;
		q.erase(q.begin());
		for (int i = 0; i < 4; ++i)
		{
			int nx = v.first.first + dx[i], ny = v.first.second + dy[i];
			if (nx >= 0 && nx < n && ny >= 0 && ny < m)
			{
				if (a[nx][ny] == 0) continue;
				if (a[nx][ny] == 4)
				{
					int go = dp[i][nx][ny] + 1;
					int nwx = nx + dx[i] * dp[i][nx][ny], nwy = ny + dy[i] * dp[i][nx][ny];
					if (nwx >= n || nwx < 0 || nwy >= m || nwy < 0 || a[nwx][nwy] == 0 || a[nwx][nwy] == 3)nwx -= dx[i], nwy -= dy[i], --go;
					if (d[nwx][nwy][0] > d[v.first.first][v.first.second][v.second] + go)
					{
						q.erase({ d[nwx][nwy][0], {{nwx,nwy},0} });
						d[nwx][nwy][0] = d[v.first.first][v.first.second][v.second] + go;
						q.insert({ d[nwx][nwy][0], {{nwx,nwy},0} });
					}
				}
				else if (a[nx][ny] == 3)
				{
					if (!v.second)continue;
					if (d[nx][ny][1] > d[v.first.first][v.first.second][v.second] + 1)
					{
						q.erase({ d[nx][ny][1], {{nx,ny},1} });
						d[nx][ny][1] = d[v.first.first][v.first.second][v.second] + 1;
						q.insert({ d[nx][ny][1], {{nx,ny},1} });
					}
				}
				else if (a[nx][ny] == 2)
				{
					if (d[nx][ny][1] > d[v.first.first][v.first.second][v.second] + 1)
					{
						q.erase({ d[nx][ny][1], {{nx,ny},1} });
						d[nx][ny][1] = d[v.first.first][v.first.second][v.second] + 1;
						q.insert({ d[nx][ny][1], {{nx,ny},1} });
					}
				}
				else
				{
					if (d[nx][ny][v.second] > d[v.first.first][v.first.second][v.second] + 1)
					{
						q.erase({ d[nx][ny][v.second] , {{nx,ny}, v.second} });
						d[nx][ny][v.second] = d[v.first.first][v.first.second][v.second] + 1;
						q.insert({ d[nx][ny][v.second], {{nx,ny},v.second} });
					}
				}
			}
		}
	}
	if (d[n - 1][m - 1][0] == inf && d[n - 1][m - 1][1] == inf)
	{
		cout << -1;
		return 0;
	}
	cout << min(d[n - 1][m - 1][0], d[n - 1][m - 1][1]);
	//sp;
}	
