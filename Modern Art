//#pragma GCC optimize("sse,sse2,sse3,ssse3,sse4,sse4.1,sse4.2,abm,mmx,avx,avx2,popcnt,tune=native")
// #define _CRT_SECURE_NO_WARNINGS
//#include <chrono>
///#pragma comment(linker, "/STACK:160777216")
#include <set>
#include <map>
#include <deque>
#include <string>
#include <cstdint>
#include <cmath>
#include <queue>
#include <cassert>
#include <random>
#include <bitset>
#include <iomanip>
#include <cstring>
#include <numeric>
#include <time.h>//////////////
#include <ctime>
#include <climits>
#include <cstdio>
#include <vector>
#include <cstdlib>
#include <iostream>
#include <algorithm>
#include <unordered_map>
#include <complex>
#include <chrono>
#include <unordered_set>
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
//#define endl '\n'
#define mp make_pair
#define pbc push_back
#define pob pop_back()
#define empb emplace_back
#define queuel queue<long long>
#define sqr(a) ((a) * (a))
#define lsqr(a) (ld(a) * a)
#define all(x) (x).begin(), (x).end()
#define rall(x) (x).rbegin(), (x).rend()
#define pin(p) cin >> p.first >> p.second;
#define uniq(a) sort(all(a));(a).resize(unique(all(a)) - a.begin());
#define rev(v) reverse(v.begin(), v.end());
#define sout(s, c) for (auto i : s) cout << i << c;
#define pout(p) cout << p.first << " " << p.second;
#define er(v, l, r) erase(v.begin() + l, v.begin() + r);
#define vin(v) for (ll i = 0; i < v.size(); ++i) cin >> v[i];
#define vout(v, c) for (int i = 0; i < v.size(); ++i) cout << v[i] << c;
#define pushi(v, a) for (int i = 0; i < a.size(); ++i) v.push_back(a[i]);
#define fastio() ios_base::sync_with_stdio(0); cout.tie(0); cin.tie(0); srand(time(NULL))
#define dab(v) for(auto i:v)cout<<i<<' ';
#define sp system("pause")
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++

typedef long long ll;
typedef long double ld;
typedef unsigned long long ull;
using namespace std;
typedef complex<double> cd;
//++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++--++
const int inf = 1e9;
const ll INF = 1e18;
const ld PI = acos(-1);
const ld EPS = 1e-9;
int mod = 998244353;
const int MOD7 = 1000000007;
const int MOD9 = 1000000009;
const int MAXN = 1001;
const int MAXC = MAXN * MAXN;
pair<pair<int, int>, pair<int, int>> kekc[MAXC];
signed main()
{
	fastio();
	freopen("art.in", "r", stdin);
	freopen("art.out", "w", stdout);
	int n;
	cin >> n;
	vector<int> ok(n * n + 1, 1);
	vector<vector<int>> a(n, vector<int>(n));
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			cin >> a[i][j];
		}
	}
	fill(kekc, kekc + MAXC, mp(mp(inf, inf), mp(-inf, -inf)));
	for (int i = 0; i < n; ++i)
	{
		for (int j = 0; j < n; ++j)
		{
			if (a[i][j])
			{
				kekc[a[i][j]].first.first = min(kekc[a[i][j]].first.first, i);
				kekc[a[i][j]].first.second = min(kekc[a[i][j]].first.second, j);
				kekc[a[i][j]].second.first = max(kekc[a[i][j]].second.first, i);
				kekc[a[i][j]].second.second = max(kekc[a[i][j]].second.second, j);
			}
		}
	}
	int cntc = 0;
	for (int i = 1; i <= n * n; ++i)
	{
		if (kekc[i].first.first < inf) cntc++;
	}
	if (cntc == 1 && n > 1)
	{
		cout << n * n - 1;
		return 0;
	}
	for (int i = 1; i <= n * n; ++i)
	{
		if (kekc[i].first.first != inf)
		{
			for (int ti = kekc[i].first.first; ti <= kekc[i].second.first; ++ti)
			{
				for (int tj = kekc[i].first.second; tj <= kekc[i].second.second; ++tj)
				{
					if (a[ti][tj] != i) ok[a[ti][tj]] = 0;
				}
			}
		}
	}
	int cnt = 0;
	for (int i = 1; i <= n * n; ++i) cnt += ok[i];
	cout << cnt;
//	sp;
}
